#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include "combos.dtsi"  // requires layer aliases
#include "mouse.dtsi"
#include "extra_keys.h"

/* source keypos definitions */
#include "../../../zmk-nodefree-config/keypos_def/keypos_42keys.h"

#if CONFIG_WIRELESS
    #include <dt-bindings/zmk/bt.h>
    #define _BT_SEL_KEYS_ &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR
#else
    #define _BT_SEL_KEYS_ &trans &trans &trans &trans &trans
#endif

#include "../../../zmk-nodefree-config/helper.h"
/* activate bluetooth */
#define CONFIG_WIRELESS 1

#define COMBO_TIMEOUT 60

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define DANGER  3

/ {
    macros {
	ny: ny {
            label = "ny";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 10>
		,<&macro_tap &kp N &kp A &kp Y &kp E &kp O &kp N>
                ;
        };
    };
};


/ {
    combos {
        compatible = "zmk,combos";
 	 combo_del {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <11 12 13>;
            bindings = <&mt RALT DEL>;
        };
	 combo_cw {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <2 3 4>;
            bindings = <&caps_word>;
        };
	 combo_tab {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <10 11 12>;
            bindings = <&mt K_CONTEXT_MENU TAB>;
        };
	 combo_row {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <12 13 14>;
            bindings = <&kp LS(HOME)>;
        };
	 combo_esc {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <0 1 2>;
            bindings = <&kp ESC>;
	 };
	 combo_ctlbksp {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <6 7 8>;
            bindings = <&kp LC(BSPC)>;
        };
	 combo_bksp {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <16 17 18>;
            bindings = <&kp BSPC>;
        };
    };
};

&caps_word {
	continue-list = <UNDERSCORE MINUS BACKSPACE DELETE HOME END LEFT RIGHT>;
};

&kscan0 {
	debounce-period = <20>;
	};
/ {
	behaviors {

        bh: layer_taps 
		{
			compatible = "zmk,behavior-hold-tap";
			label = "Layer-Tap";
			#binding-cells = <2>;
			tapping_term_ms = <215>;
            flavor = "tap-preferred";
			bindings = <&mo>, <&kp>;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
		sm: shift_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick_tap_ms = <0>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
        };
     };
   };

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// | Esc |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | Del |
// | Tab |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  | Del |
// | Sft |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | Del |
//                   | GUI | LWR | ENT |   | SPC | RSE  | ALT |
                        bindings = <
   &mt LC(LS(LALT)) ESC &kp Q &kp W &kp E &kp R &kp T                                               &kp Y &kp U  &kp I     &kp O   &kp P &kp DEL
   &kp TAB &hm LG(A) A &kp S &kp D &hm LG(F) F &kp G                                                &kp H &kp J  &kp K &kp L   &kp ENTER &kp DEL
   &sk LS(LC(LA(LGUI))) &mt LSHIFT Z &hm LG(X) X &hm LG(C) C &hm LG(V) V &hm LS(LC(LA(V))) B        &kp N &kp M  &kp COMMA &kp DOT &mt RSHFT FSLH &kp DEL
                                            &kp LSHIFT &sk LGUI &lt LOWER SPACE                     &lt RAISE SPACE &kp BACKSPACE &mt LS(LC(LA(LGUI))) LS(LC(LA(LG(H))))
                        >;
		label = "BASE";
                };

                lower_layer {

                        bindings = <
   &trans &trans &kp LS(LC(TAB)) &kp UP &kp LC(TAB) &kp LG(TAB)                             &trans &trans &trans &trans &trans &trans 
   &trans &trans &kp LEFT &kp DOWN &kp RIGHT &trans                            &kp HASH &trans &trans &trans &trans &trans
   &trans &trans &trans &trans &trans &trans                            &trans &trans &trans &trans &trans &trans
                        &trans &trans &trans                            &trans &trans &trans
                        >;
		label = "Lower";
                };

                raise_layer {

                        bindings = <
    &trans &kp QUESTION &trans &trans &trans &trans                                                                 &trans &kp N7 &kp N8 &kp N9 &trans &trans 
    &trans &trans &kp LEFT_PARENTHESIS &kp DOUBLE_QUOTES &kp RIGHT_PARENTHESIS &trans                               &kp KP_DOT &kp N4 &kp N5 &kp N6 &trans &trans
    &trans &trans &trans &trans &trans &trans                                                                       &kp N0 &kp N1 &kp N2 &kp N3 &trans &trans
                                                                &trans &trans &trans                                &trans &trans &trans
                        >;
		label = "Raise";
		};
		
		danger_layer {

                        bindings = <
   &trans &bootloader  &kp AT &kp HASH &kp PAUSE_BREAK &kp SLCK              &kp C_VOL_UP &hm LC(V) LC(C)  &ny &kp LC(LA(DEL)) &bootloader &trans
   &trans &trans   &trans &kp LC(LSHFT)  &mt LSHFT UP   &mt LCTRL PSCRN   &kp C_VOL_DN &trans &trans        &kp UP &kp SEMI &trans
   &trans &kp LNLCK   &trans &kp LEFT &kp DOWN &kp RIGHT              &kp C_MUTE &trans  &kp LEFT        &kp DOWN &kp RIGHT &trans
        	     &kp LG(Z) &kp LG(X)   &kp LG(C)   &kp LC(LA(W))   &kp LC(LA(P))    &kp LC(LA(R))
                        >;
                label = "**DANGER**";
		};
        };
};